"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[496],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(r),m=i,b=p["".concat(s,".").concat(m)]||p[m]||f[m]||a;return r?n.createElement(b,l(l({ref:t},u),{},{components:r})):n.createElement(b,l({ref:t},u))}));function b(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},55150:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=r(87462),i=(r(67294),r(3905));const a={sidebar_position:2,title:"About filters"},l="What are filters?",o={unversionedId:"Filters",id:"Filters",title:"About filters",description:"Filters are simply functions that return true or false, very similarly to the filters in Sleitnick's TableUtil for example.",source:"@site/docs/Filters.md",sourceDirName:".",slug:"/Filters",permalink:"/rbx-baseline/docs/Filters",draft:!1,editUrl:"https://github.com/Fizzyhex/rbx-baseline/edit/main/docs/Filters.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"About filters"},sidebar:"defaultSidebar",next:{title:"Installation",permalink:"/rbx-baseline/docs/intro"}},s={},c=[{value:"Making more reusable filters",id:"making-more-reusable-filters",level:2},{value:"Roblox Instance Filters",id:"roblox-instance-filters",level:2}],u={toc:c},p="wrapper";function f(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"what-are-filters"},"What are filters?"),(0,i.kt)("p",null,"Filters are simply functions that return true or false, very similarly to the filters in ",(0,i.kt)("a",{parentName:"p",href:"https://sleitnick.github.io/RbxUtil/api/TableUtil"},"Sleitnick's TableUtil")," for example."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"TableUtil works great in conjunction with Baseline. They both use the same syntax for filters, which makes filters written for both cross compatible.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local function IsOverFive(x: number)\n    return x > 5\nend\n\nlocal filteredNumbers = Baseline.Filter({3, 5, 6, 7, 8}, IsOverFive)\n-- { 6, 7, 8 }\nprint(filteredNumbers)\n")),(0,i.kt)("h2",{id:"making-more-reusable-filters"},"Making more reusable filters"),(0,i.kt)("p",null,"Here's where the decorator pattern comes in to play. Say we want to take the above ",(0,i.kt)("inlineCode",{parentName:"p"},"IsOverFive")," filter, and make it work with a broader range of numbers. We can achieve this using a decorator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local function IsOverFilterDecorator(min: number)\n    return function(x: number)\n        return x > min\n    end\nend\n\nlocal isOverFive = IsOverFilterDecorator(5)\nlocal isOverTwenty = IsOverFilterDecorator(20)\n\n-- { 6, 7 }\nprint(Baseline.Filter({3, 4, 5, 6, 7}, isOverFive))\n\n-- { 21, 22, 23 }\nprint(Baseline.Filter({19, 20, 21, 22, 23}, isOverTwenty))\n")),(0,i.kt)("h2",{id:"roblox-instance-filters"},"Roblox Instance Filters"),(0,i.kt)("p",null,"Baseline comes with a bunch of useful filters for Roblox Instances by default. Check the API docs if you're interested in learning about all of those."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local ZombiesContainer = ServerStorage.Zombies:GetChildren()\nlocal zombieFilter = Baseline.CombineFilters(\n    Baseline.Filters.HasTag("Zombie"),\n    Baseline.Filters.IsA("Model")\n)\n\n-- { FastZombie, ZombifiedCitizen, FireZombie, Zombie }\nprint(Baseline.Filter(zombies, zombieFilter))\n')))}f.isMDXComponent=!0}}]);